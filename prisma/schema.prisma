// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Technology {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  backgroundColor    String
  textColor          String
  icon               String
  projects           Project[]         @relation(fields: [projectIds], references: [id])
  projectIds         String[]          @db.ObjectId
  creator            User?             @relation(fields: [creatorId], references: [id])
  creatorId          String?           @db.ObjectId
  technologyGroups   TechnologyGroup[] @relation(fields: [technologyGroupIds], references: [id])
  technologyGroupIds String[]          @db.ObjectId
}

model Project {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String
  detailedDescription  String
  projectImages        String[]
  projectFeatureImages FeatureImage[]
  githubLink           String
  demoLink             String
  technologies         Technology[]   @relation(fields: [technologyIds], references: [id])
  technologyIds        String[]       @db.ObjectId
  creator              User?          @relation(fields: [creatorId], references: [id])
  creatorId            String?        @db.ObjectId
}

model FeatureImage {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  priority          String
  description       String
  image             String
  showIn            ShowIn
  multiscreenImages MultiScreenImage[]
  Project           Project?           @relation(fields: [projectId], references: [id])
  projectId         String?            @db.ObjectId
}

model MultiScreenImage {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  screen         Screen
  image          String
  FeatureImage   FeatureImage? @relation(fields: [featureImageId], references: [id])
  featureImageId String?       @db.ObjectId
}

enum Screen {
  desktop
  table
  mobile
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String        @unique
  secondaryEmail  String
  profileImage    String
  contactNumber   String
  firstLineAbout  String
  secondLineAbout String
  thirdLineAbout  String
  socialMedias    SocialMedia[]
  password        String
  projects        Project[]
  technologies    Technology[]
}

model SocialMedia {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  link    String
  icon    String
  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String? @db.ObjectId
}

enum ShowIn {
  carousel
  detail
  both
}

model TechnologyType {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  TechnologyCategory TechnologyCategory[]
}

model TechnologyCategory {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String            @unique
  type             TechnologyType    @relation(fields: [technologyTypeId], references: [id])
  TechnologyGroup  TechnologyGroup[]
  technologyTypeId String            @db.ObjectId
}

model TechnologyGroup {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  category             TechnologyCategory @relation(fields: [technologyCategoryId], references: [id])
  priority             Int
  technologies         Technology[]       @relation(fields: [technologiesIds], references: [id])
  technologiesIds      String[]           @db.ObjectId
  technologyCategoryId String             @db.ObjectId
}
